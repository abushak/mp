diff --git a/src/Plugin/Menu/TaxonomyMenuMenuLink.php b/src/Plugin/Menu/TaxonomyMenuMenuLink.php
index fd8fe85..faa76df 100644
--- a/src/Plugin/Menu/TaxonomyMenuMenuLink.php
+++ b/src/Plugin/Menu/TaxonomyMenuMenuLink.php
@@ -17,16 +17,18 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
 
   /**
    * {@inheritdoc}
+   *
+   * Other possible overrides:
+   * - 'menu_name' => 1,
+   * - 'parent' => 1,
+   * - 'title' => 1,
+   * - 'description' => 1,
+   * - 'metadata' => 1,
    */
   protected $overrideAllowed = [
-    //'menu_name' => 1,
-    //'parent' => 1,
     'weight' => 1,
     'expanded' => 1,
     'enabled' => 1,
-    //'title' => 1,
-    //'description' => 1,
-    //'metadata' => 1,
   ];
 
   /**
@@ -54,8 +56,8 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
    *   The plugin implementation definition.
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\views\ViewExecutableFactory        $view_executable_factory
-   *   The view executable factory
+   * @param \Drupal\Core\Menu\StaticMenuLinkOverridesInterface $static_override
+   *   The static menu override.
    */
   public function __construct(
     array $configuration,
@@ -88,12 +90,18 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
    * {@inheritdoc}
    */
   public function getTitle() {
-    /** @var $link \Drupal\taxonomy\Entity\Term */
     $link = $this->entityTypeManager->getStorage('taxonomy_term')
       ->load($this->pluginDefinition['metadata']['taxonomy_term_id']);
-    if (!empty($link)) {
+
+    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
+    if ($link->hasTranslation($language)) {
+      $translation = $link->getTranslation($language);
+      return $translation->label();
+    }
+    else {
       return $link->label();
     }
+
     return NULL;
   }
 
@@ -101,7 +109,7 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var $link \Drupal\taxonomy\Entity\Term */
+    // @var $link \Drupal\taxonomy\Entity\Term.
     $link = $this->entityTypeManager->getStorage('taxonomy_term')
       ->load($this->pluginDefinition['metadata']['taxonomy_term_id']);
 
@@ -109,7 +117,15 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
     $taxonomy_menu = $this->entityTypeManager->getStorage('taxonomy_menu')->load($this->pluginDefinition['metadata']['taxonomy_menu_id']);
     $description_field_name = $taxonomy_menu->getDescriptionFieldName();
 
-    if (!empty($link) && $link->hasField($description_field_name)) {
+    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
+
+    if ($link->hasTranslation($language)) {
+      $translation = $link->getTranslation($language);
+      if (!empty($translation) && $translation->hasField($description_field_name)) {
+        return $translation->{$description_field_name}->value;
+      }
+    }
+    elseif (!empty($link) && $link->hasField($description_field_name)) {
       return $link->{$description_field_name}->value;
     }
     return NULL;
@@ -123,7 +139,8 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
     // Update the definition.
     $this->pluginDefinition = $overrides + $this->pluginDefinition;
     if ($persist) {
-      // TODO - consider any "persistence" back to TaxonomyMenu and/or Taxonomy upon menu link update.
+      // TODO - consider any "persistence" back to TaxonomyMenu and/or Taxonomy
+      // upon menu link update.
       // Always save the menu name as an override to avoid defaulting to tools.
       $overrides['menu_name'] = $this->pluginDefinition['menu_name'];
       $this->staticOverride->saveOverride($this->getPluginId(), $this->pluginDefinition);
@@ -143,4 +160,5 @@ class TaxonomyMenuMenuLink extends MenuLinkBase implements ContainerFactoryPlugi
    */
   public function deleteLink() {
   }
+
 }
diff --git a/tests/src/Functional/TaxonomyMenuLinkLanguageTest.php b/tests/src/Functional/TaxonomyMenuLinkLanguageTest.php
new file mode 100644
index 0000000..051b502
--- /dev/null
+++ b/tests/src/Functional/TaxonomyMenuLinkLanguageTest.php
@@ -0,0 +1,141 @@
+<?php
+
+namespace Drupal\Tests\taxonomy_menu\Functional;
+
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * Tests that the Taxonomy menu links are translatable.
+ *
+ * @group taxonomy_menu
+ */
+class TaxonomyMenuLinkLanguageTest extends BrowserTestBase {
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = [
+    'taxonomy',
+    'taxonomy_menu',
+    'language',
+    'menu_ui',
+    'content_translation',
+    'config_translation',
+    'locale',
+  ];
+
+  /**
+   * Vocabulary for testing.
+   *
+   * @var \Drupal\taxonomy\VocabularyInterface
+   */
+  protected $vocabulary;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp() {
+    parent::setUp();
+
+    $perms = [
+      'access content',
+      'administer site configuration',
+      'administer taxonomy',
+      'administer languages',
+      'administer menu',
+      'administer content translation',
+      'create content translations',
+      'update content translations',
+      'translate any entity',
+    ];
+    // Create an administrative user.
+    $this->drupalLogin($this->drupalCreateUser($perms));
+
+    // Enable German language.
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->drupalPostForm(NULL, ['predefined_langcode' => 'de'], t('Add language'));
+
+    // Create a vocabulary to which the terms will be assigned.
+    $this->drupalGet('admin/structure/taxonomy/add');
+
+    $edit = [
+      'vid' => 'test_tax_vocab',
+      'name' => 'Test',
+    ];
+    $this->drupalPostForm(NULL, $edit, t('Save'));
+
+    $this->drupalGet('admin/structure/taxonomy/manage/test_tax_vocab');
+    // Configure the vocabulary to not hide the language selector.
+    $edit = [
+      'default_language[language_alterable]' => TRUE,
+      'default_language[langcode]' => 'en',
+      'default_language[content_translation]' => TRUE,
+      'langcode' => 'en',
+    ];
+    $this->drupalPostForm('admin/structure/taxonomy/manage/test_tax_vocab', $edit, t('Save'));
+
+    // Add a first term in language 'en'.
+    $this->drupalGet('admin/structure/taxonomy/manage/test_tax_vocab/add');
+    $term_edit = [
+      'name[0][value]' => 'Fruit',
+      'langcode[0][value]' => 'en',
+    ];
+    $this->drupalPostForm(NULL, $term_edit, t('Save'));
+    $terms = taxonomy_term_load_multiple_by_name($term_edit['name[0][value]']);
+    $term = reset($terms);
+
+    // Add the German translation to the term.
+    $term_edit = [
+      'name[0][value]' => 'Obst',
+    ];
+
+    $this->drupalGet('taxonomy/term/' . $term->id() . '/translations/add/en/de');
+    $this->drupalPostForm(NULL, $term_edit, t('Save'));
+
+    // Create a testing menu.
+    $this->drupalGet('admin/structure/menu/add');
+    $edit = [
+      'id' => 'test-menu',
+      'label' => 'Test',
+      'langcode' => 'en',
+    ];
+    $this->drupalPostForm(NULL, $edit, t('Save'));
+
+    // Create new taxonomy menu.
+    $this->drupalGet('admin/structure/taxonomy_menu/add');
+    $edit = [
+      'id' => 'test_tax_menu',
+      'label' => 'test tax menu',
+      'vocabulary' => 'test_tax_vocab',
+      'menu' => 'test-menu',
+      'expanded' => 1,
+      'depth' => '1',
+      'menu_parent' => 'test-menu:',
+    ];
+    $this->drupalPostForm(NULL, $edit, t('Save'));
+  }
+
+  /**
+   * Test for the English taxonomy term in the menu.
+   *
+   * Test whether the English taxonomy term 'Fruit' is in the English
+   * version of the 'test-menu' menu.
+   */
+  public function testTaxonomyMenuLanguageEnglishTitle() {
+    $this->drupalGet('admin/structure/menu/manage/test-menu');
+    $this->assertSession()->linkExists('Fruit');
+  }
+
+  /**
+   * Test for the German translated taxonomy term in the menu.
+   *
+   * Test whether the German translation, 'Obst', of the English taxonomy term
+   * 'Fruit' is in the German version of the 'test-menu' menu.
+   */
+  public function testTaxonomyMenuLanguageGermanTitle() {
+    $this->drupalGet('de/admin/structure/menu/manage/test-menu');
+    $this->assertSession()->linkExists('Obst');
+  }
+
+}
